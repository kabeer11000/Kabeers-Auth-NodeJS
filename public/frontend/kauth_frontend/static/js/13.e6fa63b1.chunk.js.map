{
  "version": 3,
  "sources": [
    "components/AutoRedirectScreen/AutoRedirectScreen.js",
    "components/LoginLogic/index.js",
    "components/PermessionsScreen/PermessionsScreen.lazy.js",
    "components/HideOnScroll/HideOnScroll.js",
    "components/StepperBase/StepperBase.js"
  ],
  "names": [
    "AutoRedirectScreen",
    "_React$useState",
    "React",
    "useState",
    "_React$useState2",
    "Object",
    "slicedToArray",
    "errorDesc",
    "setErrorDesc",
    "useEffect",
    "mainElement",
    "document",
    "getElementById",
    "getAttribute",
    "AppData",
    "appName",
    "account",
    "Cookies",
    "get",
    "JSON",
    "parse",
    "Login",
    "objectSpread",
    "password",
    "btoa",
    "catch",
    "e",
    "console",
    "log",
    "react_default",
    "a",
    "createElement",
    "title",
    "concat",
    "MainElement",
    "className",
    "Preloader",
    "Typography",
    "variant",
    "defaultProps",
    "LoginLogic",
    "props",
    "Error",
    "Accounts",
    "localStorage",
    "getItem",
    "length",
    "AccountChooser_lazy",
    "PasswordScreen_lazy",
    "components_AutoRedirectScreen_AutoRedirectScreen",
    "Fragment",
    "m",
    "arguments",
    "undefined",
    "d",
    "Container",
    "component",
    "maxWidth",
    "style",
    "position",
    "top",
    "left",
    "width",
    "transform",
    "Avatar",
    "src",
    "alt",
    "errorPage",
    "Button",
    "onClick",
    "removeItem",
    "window",
    "location",
    "reload",
    "LazyPermessionsScreen",
    "lazy",
    "Promise",
    "all",
    "__webpack_require__",
    "then",
    "bind",
    "PermessionsScreen",
    "react",
    "fallback",
    "HideOnScroll",
    "direction",
    "appear",
    "children",
    "trigger",
    "useScrollTrigger",
    "target",
    "Slide",
    "in",
    "pure",
    "useStyles",
    "makeStyles",
    "theme",
    "root",
    "button",
    "marginRight",
    "spacing",
    "instructions",
    "marginTop",
    "marginBottom",
    "StepperBase",
    "classes",
    "activeStep",
    "setActiveStep",
    "_React$useState3",
    "Set",
    "_React$useState4",
    "skipped",
    "setSkipped",
    "steps",
    "isStepSkipped",
    "step",
    "has",
    "handleNext",
    "newSkipped",
    "values",
    "delete",
    "prevActiveStep",
    "handleBack",
    "components_HideOnScroll_HideOnScroll",
    "Stepper",
    "elevation",
    "map",
    "label",
    "index",
    "stepProps",
    "labelProps",
    "completed",
    "Step",
    "assign",
    "key",
    "StepLabel",
    "CircularProgress",
    "LoginLogic_LoginLogic",
    "callNext",
    "callBack",
    "PermessionsScreen_lazy",
    "getStepContent"
  ],
  "mappings": "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",
  "file": "static/js/13.e6fa63b1.chunk.js",
  "sourcesContent": [
    "import React, {useEffect} from 'react';\nimport './AutoRedirectScreen.css';\nimport Preloader from \"../Preloader/Preloader\";\nimport {Login} from \"../../functions/Login/Login\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Cookies from \"js-cookie\";\nimport {MainElement} from \"../../functions/Misc/Misc\";\n\nconst AutoRedirectScreen = () => {\n\n    const [errorDesc, setErrorDesc] = React.useState();\n\n    useEffect(() => {\n        const mainElement = document.getElementById('DataContainer');\n        if (mainElement.getAttribute('promptType') === 'none') {\n            const AppData = {\n                appName: mainElement.getAttribute('appName'),\n                account: Cookies.get('default_account') ? JSON.parse(Cookies.get('default_account')) : null,\n            };\n            if (AppData.account) Login({\n                ...AppData.account,\n                password: btoa(AppData.account.password)\n            }).catch(e => console.log(e));\n            else setErrorDesc(<div>This Kabeers Auth Session Faced Internal Server Error</div>);\n        }\n    }, []);\n    document.title = `Redirecting you to ${MainElement.getAttribute('appName')}. Please wait...`;\n\n    return (\n        <div className=\"AutoRedirectScreen\">\n            <div>\n                <Preloader/>\n                <br/>\n                <Typography variant={\"caption\"}>\n                    Redirecting You to <b>{document.getElementById('DataContainer').getAttribute('appName')}</b>\n                </Typography>\n                {\n                    errorDesc\n                }\n            </div>\n        </div>\n    );\n};\n\nAutoRedirectScreen.propTypes = {};\n\nAutoRedirectScreen.defaultProps = {};\n\nexport default AutoRedirectScreen;\n/*\n<div id=\"DataContainer\"\n     prompttype=\"{{promptType}}\"\n     appname=\"{{appName}}\"\n     clientpublic=\"{{clientPublic}}\"\n     authcode=\"{{authCode}}\"\n     appperms=\"{{appPerms}}\"\n     appicon=\"{{appIcon}}\"\n     account=\"{{account}}\">\n</div>\n\n */\n",
    "import React from \"react\";\r\nimport AccountChooser from \"../AccountChooser/AccountChooser.lazy\";\r\nimport PasswordScreen from \"../PasswordScreen/PasswordScreen.lazy\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Cookies from 'js-cookie';\r\nimport AutoRedirectScreen from \"../AutoRedirectScreen/AutoRedirectScreen\";\r\n\r\nexport const LoginLogic = (props) => {\r\n    const mainElement = document.getElementById('DataContainer');\r\n    if (!mainElement) throw new Error('\"MainElement\" Not Defined');\r\n    const AppData = {\r\n        PromptType: mainElement.getAttribute('promptType'),\r\n    };\r\n    const Accounts = localStorage.getItem('accounts') === null ? null : JSON.parse(localStorage.getItem('accounts'));\r\n\r\n    const errorPage = (m = 'Invalid Authentication Parameters', d = <div>Please Contact Site Owner if Problem Persists.\r\n        If you are owner of this site Please Add Required Parameters for <code>response_type=token</code></div>) => (\r\n        <div>\r\n            <Container component=\"main\" className={'pb-2'} maxWidth=\"xs\">\r\n                <div className={'errorPage text-center'}\r\n                     style={{\r\n                         position: 'absolute',\r\n                         top: '40%',\r\n                         left: '50%',\r\n                         width: '90vw',\r\n                         transform: 'translate(-50%, -50%)'\r\n                     }}>\r\n                    <div className={'mb-3 d-inline-flex justify-content-center'}>\r\n                        <Avatar src={'https://cdn.worldvectorlogo.com/logos/google-domains.svg'}\r\n                                alt={'Kabeers Network Logo'}/>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Typography variant={\"body1\"} className={'mb-3'}>\r\n                            {m}\r\n                        </Typography>\r\n                        <Typography variant={\"caption\"}>\r\n                            {d}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n    switch (AppData.PromptType) {\r\n        case 'chooser':\r\n            return Accounts && Accounts.length ? <AccountChooser {...props}/> : <PasswordScreen {...props}/>;\r\n        case 'password':\r\n            return <PasswordScreen {...props}/>;\r\n        case 'consent':\r\n            return Accounts && Accounts.length ? <AccountChooser {...props}/> : <PasswordScreen {...props}/>;\r\n        case 'none':\r\n            if (Cookies.get('default_account')) return <AutoRedirectScreen/>;\r\n            else return Accounts && Accounts.length ? <AccountChooser {...props}/> : <PasswordScreen {...props}/>;\r\n        default:\r\n            return <>{errorPage('Invalid Auth Request', <div>Try Clearing Accounts And Signing in Again\r\n                <br/>\r\n                <Button onClick={() => {\r\n                    localStorage.removeItem('accounts');\r\n                    window.location.reload()\r\n                }}>\r\n                    Clear\r\n                </Button>\r\n            </div>)}</>;\r\n    }\r\n};\r\n/*\r\n    switch (AppData.PromptType) {\r\n        case 'chooser':\r\n            return () => {\r\n                if (Accounts !== undefined && Accounts.length !== -1) return (<AccountChooser {...props}/>);\r\n                else return <PasswordScreen {...props}/>;\r\n            };\r\n        case 'password':\r\n            return <PasswordScreen {...props}/>;\r\n        case 'consent':\r\n            return () => {\r\n                if (Accounts !== undefined && Accounts.length !== -1) return (<AccountChooser {...props}/>);\r\n                else return <PasswordScreen {...props}/>;\r\n            };\r\n        default:\r\n            return <></>;\r\n    }\r\n\r\n */\r\n",
    "import React, { lazy, Suspense } from 'react';\n\nconst LazyPermessionsScreen = lazy(() => import('./PermessionsScreen'));\n\nconst PermessionsScreen = props => (\n  <Suspense fallback={null}>\n    <LazyPermessionsScreen {...props} />\n  </Suspense>\n);\n\nexport default PermessionsScreen;\n",
    "import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./HideOnScroll.css\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Slide from \"@material-ui/core/Slide\";\nimport {pure} from \"recompose\";\n\nconst HideOnScroll = (props = {...props, direction: \"down\", appear: false}) => {\n    const {children, window} = props;\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n    const trigger = useScrollTrigger({target: window ? window() : undefined});\n\n    return (\n        <Slide appear={props.appear} direction={props.direction} in={!trigger}>\n            {children}\n        </Slide>\n    );\n};\n\nHideOnScroll.propTypes = {\n    children: PropTypes.element.isRequired,\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    window: PropTypes.func,\n};\n\nHideOnScroll.defaultProps = {};\n\nexport default pure(HideOnScroll);\n",
    "import React from 'react';\nimport './StepperBase.css';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {LoginLogic} from \"../LoginLogic\";\nimport PermessionsScreen from \"../PermessionsScreen/PermessionsScreen.lazy\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport HideOnScroll from \"../HideOnScroll/HideOnScroll\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nfunction getSteps() {\n    return ['Sign In', 'Allow App'];\n}\n\n\nconst StepperBase = (props) => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [skipped, setSkipped] = React.useState(new Set());\n    const steps = getSteps();\n\n    const isStepOptional = (step) => {\n        //return step === 1;\n        return false\n    };\n    const isStepSkipped = (step) => {\n        return skipped.has(step);\n    };\n\n    const handleNext = () => {\n        let newSkipped = skipped;\n        if (isStepSkipped(activeStep)) {\n            newSkipped = new Set(newSkipped.values());\n            newSkipped.delete(activeStep);\n        }\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        setSkipped(newSkipped);\n    };\n    const getStepContent = (step) => {\n        switch (step) {\n            case 0:\n                return <LoginLogic callNext={handleNext} callBack={handleBack}/>;\n            case 1:\n                return <PermessionsScreen/>;\n            case 2:\n                return 'This is the bit I really care about!';\n            default:\n                return 'Unknown step';\n        }\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleSkip = () => {\n        if (!isStepOptional(activeStep)) {\n            // You probably want to guard against something like this,\n            // it should never occur unless someone's actively trying to break something.\n            throw new Error(\"You can't skip a step that isn't optional.\");\n        }\n\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        setSkipped((prevSkipped) => {\n            const newSkipped = new Set(prevSkipped.values());\n            newSkipped.add(activeStep);\n            return newSkipped;\n        });\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    return (\n        <div className={classes.root}>\n            <HideOnScroll>\n                <Stepper activeStep={activeStep} className={'fixed-top'} elevation={2}>\n                    {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n                        if (isStepOptional(index)) labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n                        if (isStepSkipped(index)) stepProps.completed = false;\n\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n            </HideOnScroll>\n            <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        <Typography className={classes.instructions}>\n                            <div className={'text-center'}>\n                                <CircularProgress/>\n                                <br/>\n                                <Typography>\n                                    You are being Redirected to the app\n                                </Typography>\n                            </div>\n                        </Typography>\n                        <Button onClick={handleReset} className={classes.button}>\n                            Reset\n                        </Button>\n                    </div>\n                ) : (\n                    <div>\n                        {getStepContent(activeStep)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\nStepperBase.propTypes = {};\n\nStepperBase.defaultProps = {};\n\nexport default StepperBase;\n/*\n                    <div>\n                        <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                        <div>\n                            <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                                Back\n                            </Button>\n                            {isStepOptional(activeStep) && (\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={handleSkip}\n                                    className={classes.button}\n                                >\n                                    Skip\n                                </Button>\n                            )}\n\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={()=>handleNext()}\n                                className={classes.button}\n                            >\n                                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                            </Button>\n                        </div>\n                    </div>\n */\n"
  ],
  "sourceRoot": ""
}
