<head>
    <script>
        (function () {
            const accounts = async (res) => {
                if (null === localStorage.getItem("accounts")) {
                    const a = [{
                        username: res.user_data.username,
                        email: res.user_data.email,
                        password: btoa(res.user_data.password),
                        account_image: res.user_data.account_image
                    }];
                    localStorage.setItem("accounts", JSON.stringify(a))
                } else {
                    const data = JSON.parse(localStorage.getItem("accounts")), currentData = {
                        username: res.user_data.username,
                        email: res.user_data.email,
                        password: btoa(res.user_data.password),
                        account_image: res.user_data.account_image
                    };
                    JSON.stringify(data).includes(JSON.stringify(currentData)) || (data.push({
                        username: res.user_data.username,
                        email: res.user_data.email,
                        password: btoa(res.user_data.password),
                        account_image: res.user_data.account_image
                    }), localStorage.setItem("accounts", JSON.stringify(data)))
                }
            };
            const ajax = async (a = {}) => {
                return (await fetch(a.url, {...a})).json()
            };
            const getFormData = n => {
                let e = [];
                for (let o in n) n.hasOwnProperty(o) && e.push(encodeURIComponent(o) + "=" + encodeURIComponent(n[o]));
                return e.join("&")
            };
            const getToken = async () => {
                let t = void 0;
                return await ajax({
                    url: "/auth/token",
                    method: "POST",
                    timeout: 0,
                    headers: {"Content-Type": "application/x-www-form-urlencoded"},
                    body: getFormData({
                        client_secret: "{{client_secret}}",
                        client_public: "{{client_public}}",
                        auth_code: "{{code}}"
                    })
                }).then(function (e) {
                    t = e
                }), t
            };
            const settings = {
                url: "/auth/allow",
                method: "POST",
                timeout: 0,
                headers: {"Content-Type": "application/x-www-form-urlencoded"},
                body: getFormData({username: "{{username_}}", password: "{{password_}}", auth_code: "{{code}}"})
            };
            ajax(settings).then((res) => {
                if (res) {
                    accounts(res);
                    "code" === '{{response_type}}' && (window.location.href = res.callback);
                    if ("token" === '{{response_type}}') {
                        const e = new URLSearchParams(res.callback);
                        getToken().then(t => {
                            t && (window.location.href = `${res.callback.split(/[?#]/)[0]}?token=${encodeURI(JSON.stringify(t))}&nonce=${e.get("nonce")}&state=${e.get("state")}`)
                        })
                    }
                }
            });
        })();
    </script>
</head>
<kverlay>
    <loader>
        <svg class="spinner" width="15vh" height="15vh" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
            <circle class="circle" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
        </svg>
    </loader>
</kverlay>
<style>kverlay {
    position: fixed;
    display: block;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 2;
    cursor: pointer
}

loader {
    position: absolute;
    top: 50%;
    left: 50%;
    font-size: 50px;
    color: white;
    transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%)
}

.spinner {
    -webkit-animation: rotation 1.35s linear infinite;
    animation: rotation 1.35s linear infinite
}

@-webkit-keyframes rotation {
    0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg)
    }
    100% {
        -webkit-transform: rotate(270deg);
        transform: rotate(270deg)
    }
}

@keyframes rotation {
    0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg)
    }
    100% {
        -webkit-transform: rotate(270deg);
        transform: rotate(270deg)
    }
}

.circle {
    stroke-dasharray: 180;
    stroke-dashoffset: 0;
    -webkit-transform-origin: center;
    -ms-transform-origin: center;
    transform-origin: center;
    -webkit-animation: turn 1.35s ease-in-out infinite;
    animation: turn 1.35s ease-in-out infinite
}

@-webkit-keyframes turn {
    0% {
        stroke-dashoffset: 180
    }
    50% {
        stroke-dashoffset: 45;
        -webkit-transform: rotate(135deg);
        transform: rotate(135deg)
    }
    100% {
        stroke-dashoffset: 180;
        -webkit-transform: rotate(450deg);
        transform: rotate(450deg)
    }
}

@keyframes turn {
    0% {
        stroke-dashoffset: 180
    }
    50% {
        stroke-dashoffset: 45;
        -webkit-transform: rotate(135deg);
        transform: rotate(135deg)
    }
    100% {
        stroke-dashoffset: 180;
        -webkit-transform: rotate(450deg);
        transform: rotate(450deg)
    }
}

svg {
    stroke: #9e9e9e
}</style>
